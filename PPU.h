#pragma once
#include <SDL.h>
#include <vector>

class NES;
class CPU; // header

#define CPUCYCLES_PER_SCANLINE 113
#define PPUCYCLES_PER_SCANLINE 341
#define VISIBLE_SCANLINES 240
#define SCANLINES_PER_FRAME 262
#define REG2002_IGNORE_VRAM_WRITES 4
#define REG2002_VBLANK 7
#define REG2002_SPRHIT 6
#define REG2002_SPROVR 5
#define REG_PPU_STATUS 0x2002

struct RGBColor
{
	unsigned char R;
	unsigned char G;
	unsigned char B;
};

static RGBColor Pallete[] = { 
{0x80,0x80,0x80}, {0x00,0x3D,0xA6}, {0x00,0x12,0xB0}, {0x44,0x00,0x96},
{0xA1,0x00,0x5E}, {0xC7,0x00,0x28}, {0xBA,0x06,0x00}, {0x8C,0x17,0x00},
{0x5C,0x2F,0x00}, {0x10,0x45,0x00}, {0x05,0x4A,0x00}, {0x00,0x47,0x2E},
{0x00,0x41,0x66}, {0x00,0x00,0x00}, {0x05,0x05,0x05}, {0x05,0x05,0x05},
{0xC7,0xC7,0xC7}, {0x00,0x77,0xFF}, {0x21,0x55,0xFF}, {0x82,0x37,0xFA},
{0xEB,0x2F,0xB5}, {0xFF,0x29,0x50}, {0xFF,0x22,0x00}, {0xD6,0x32,0x00},
{0xC4,0x62,0x00}, {0x35,0x80,0x00}, {0x05,0x8F,0x00}, {0x00,0x8A,0x55},
{0x00,0x99,0xCC}, {0x21,0x21,0x21}, {0x09,0x09,0x09}, {0x09,0x09,0x09},
{0xFF,0xFF,0xFF}, {0x0F,0xD7,0xFF}, {0x69,0xA2,0xFF}, {0xD4,0x80,0xFF},
{0xFF,0x45,0xF3}, {0xFF,0x61,0x8B}, {0xFF,0x88,0x33}, {0xFF,0x9C,0x12},
{0xFA,0xBC,0x20}, {0x9F,0xE3,0x0E}, {0x2B,0xF0,0x35}, {0x0C,0xF0,0xA4},
{0x05,0xFB,0xFF}, {0x5E,0x5E,0x5E}, {0x0D,0x0D,0x0D}, {0x0D,0x0D,0x0D},
{0xFF,0xFF,0xFF}, {0xA6,0xFC,0xFF}, {0xB3,0xEC,0xFF}, {0xDA,0xAB,0xEB},
{0xFF,0xA8,0xF9}, {0xFF,0xAB,0xB3}, {0xFF,0xD2,0xB0}, {0xFF,0xEF,0xA6},
{0xFF,0xF7,0x9C}, {0xD7,0xE8,0x95}, {0xA6,0xED,0xAF}, {0xA2,0xF2,0xDA},
{0x99,0xFF,0xFC}, {0xDD,0xDD,0xDD}, {0x11,0x11,0x11}, {0x11,0x11,0x11}, };


class PPU
{
	NES* pr_NES;
	CPU* pr_CPU;
	unsigned char* pr_CPUMem;
	unsigned char* pr_PPUMem;
	unsigned long ulFrame;
	unsigned long ulLastClockTicksElapsed;
	int iPPUCycles;
	unsigned char OAM[256];
	std::vector<int> vScanlineSPrites;
	unsigned char byPixelLineL, byPixelLineH;
	unsigned char vPixelLine[8];
	unsigned char byState;
	unsigned short wVRAMAddress;
	/* sprite RAM address */
	unsigned short wOAMAddress;
	int iCurrentScanline, iLastScanLine;
	unsigned short wBGPatternTabBaseAddr;
	unsigned short wSPRPatternTabBaseAddr;
	unsigned short wNameTableBaseAddr;
	unsigned short wBGPaletteAddr;
	unsigned short wSPRPaletteAddr;
	bool bSpriteSize;   // false = 8x8   true = 8x16
	bool bTestSetVBLANK, bTestClearVBLANK;
	bool bFrameDrawn,bScanLineDrawn,bSpriteEvalDone;
	bool bDrawBG, bDrawSprites;
	int iKeyboardState;
	unsigned char byPPUIncrement;
	SDL_Window* m_window;
	SDL_Surface* screenSurface;
	SDL_Surface* backBuffer;
	void drawPixel(int xParam, int yParam, RGBColor* pr_RGBParam);
public:
	PPU();
	~PPU();
	void Reset();
	void Init(NES* pr_NESParam, CPU* pr_CPUParam, unsigned char* pr_CPUMemParam,unsigned char * pr_PPUMemParam);
	int GetCurrentScanLine();
	int GetCycle();
	void Render();
	void Render(int iScanLineParam); 
	void DrawSprites(bool bBehindBGParam);
	void SpriteEvaluation();
	void UpdateStatus(bool bMayTriggerNMIParam,unsigned long int ulClockTicksElapsedParam);
	void HandleIORegisters(bool bIsWritingParam, unsigned short wAddressParam, unsigned char *pr_DataParam);
};

